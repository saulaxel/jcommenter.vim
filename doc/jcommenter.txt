*jcommenter.txt* Automate the creation of Java comments

Version: 1.3.1
Author: Bj√∂rklid <bjorklid@st.jyu.fi>

==============================================================================
CONTENTS                                                 *jcommenter_contents*

    0. Installation ............................ |jcommenter-installation|
    1. Usage ................................... |jcommenter_usage|
    2. Mappings ................................ |jcommenter_mappings|
    3. Configuration ........................... |jcommenter_configuration|
    4. Bugs .................................... |jcommenter_bugs|
    5. Contributing ............................ |jcommenter_contributing|
    6. Changelog ............................... |jcommenter_changelog|

==============================================================================
0. Installation                                      *jcommenter_installation*

Hard way:
    Copy-paste the files of the plugin into its corresponding folders of your
    vim path.

The easy way:
    Use a plugin manager and add a line as the later to the corresponding part
    of your vim configuration:

        <Name-of-plugin-manager> 'saulaxel/jcommenter.vim'

==============================================================================
1. Usage                                                    *jcommenter_usage*

This plugin provides a way to automate the creation of JavaDoc compatible
documentation for java source-files. The JCommenterWriter() can produce four
kinds of comments depending on the current line/range.
 - File comments. When the JcommenterWriter() function is called on the first line
   of the file, a template for file comments is created. It looks like this:

        /*  Filename : <name of current buffer>
         *  Author   : <author>
         *  Summary  :
         *  Version  :
         *  Created  : <current system time>
         */

    Note: Some aspects of this and other  templates can be tuned through
    configuration variables. See |jcommenter_configuration| for more info.

 - Class comments. When the JCommenterWriter() function is called on the
   header of a class, a template for class (or interface), a template for
   class comments is created. It looks like this:

        /**
         *
         * @author <author>
         * @version <version>
         */
        public class ClassName { ...

   The JavaDoc-tags are automatically generated by detecting the parameter
   names, return value and exceptions that are declared in the header of the
   method. An example:

         /**
          *
          * @param numbers
          * @param str
          * @return
          * @throws IOException
          * @throws NumberFormatException
          */
         public String [] method(Integer[] numbers, String str) throws
               IOException, NumberFormatException {

    If executed in a method declaration that already has Do-Comments you can
    let jcommenter to try to parse the existing comments and add or remove
    tags that are new (for example, if you have declared another exception to
    be thrown) to the comments.
    Note: Since the method header is on two lines, you need to specify the
    range (include everything before the '{', or ';' if the method is
    abstract).

  - Field comments. Appends this above the field declaration:

         /**
          *
          */

    Can also be changed to '/** */' depending the configuration.

  - Extending single-line comments into multi-line: When executed on a line
    like '/** blah blah blah */' the result is:
         /**
          * blah blah blah
          */

  - When executed on an existing JavaDoc tag, copy that tag under that line.
    For example, when executed on the following line:
          * @throws IOException
    If cannot read file the result is:
          * @throws IOException
    If cannot read file the result is::
          * @throws
    Quite nice when you want to document those RuntimeException, or need to
    add another parameter.

  - RuntimeException tag adding. If you execute the commenter on a line like
    "throw new RuntimeException()", the previous doc-comments are searched,
    and a tag for the RuntimeException is added there.

  - Function/class/etc. end commenting. If you execute the commenter on a line
    containing only a closing '}' (and maybe some whitespace), the
    method/class name is added as a comment after the bracket:

         public aVeryLongMethod() {
             ...
         } // END: aVeryLongMethod

   - Cycle through incomplete comments using SearchInvalidComment-method. If
     you use the default mappings, use <M-n> to go to next incomplete comment,
     and <M-p> to go to previous one. Handy when finding incomplete comments,
     and completing a template just generated (don't have to quit insert mode
     or use arrow keys)..

   - When executed on last line of the file (which must be empty) a modeline
     gets generated.

If you didn't change the default mappings, you can trigger the
comment-generation by pressing Alt-c (or "Meta-c"). The cursor must be on the
same line as teh method/class/attribute declaration in order to achieve
something useful. If the declaration extends to several lines, the range must
be specified. Range should include everything from the declaration that comes
before the '{' or ';'. Everything after either of those characters is ignored,
so linewise selection is a handy way to do this.

Notes:
 - If a method name starts with an uppercase letter, it is handled as a
   constructor (no @return-tag is generated)

==============================================================================
2. Mappings                                              *jcommenter_mappings*

By default, a series of mappings are recognized to use the functionality of
jcommenter. If you want to turn off these mappings and use your own, define
the g:jcommenter_default_mappings to 0 as follows:

    let g:jcommenter_default_mappings = 0

Otherwise, the following mappings apply:

    <M-c>  Call the commenter function in any mode

    <M-n>  Search invalid comment forwards (in any mode). Invalid here means
           that the "main" comments are missing or the tag description is
           missing. Handy when searching for missing comments or when jumping
           to next tag (no need to use cursor keys or quit insert mode)

    <M-p>  Search invalid comment backwards (in any mode)

    }-     When typed in insert mode and followed by a whitespace character,
           jcommenter will be automatically called on the function/class
           declaration whose end the '}' is


==============================================================================
3. Configuration                                    *jcommenter_configuration*

g:jcommenter_default_mappings
        Defines whether if the default mappings apply
        Default: v:true

g:jcommenter_move_cursor
        Move cursor to the place where inserting comments supposedly should
        start.
        Default: v:true

g:jcommenter_description_starts_from_first_line
        Defines whether to move the cursor to the line which has "/**" or the
        line after that. Effective only if g:jcommenter_move_cursor is enabled
        Default: v:false

g:jcommenter_autostart_insert_mode
        Start insert mode after calling the commenter. Effective only if
        g:jcommenter_move_cursor is enabled.
        Default: v:true

g:jcommenter_method_description_space
        The number of empty rows (containing only the star) to be added for
        the description of the method
        Default: 2

g:jcommenter_field_description_space
        The number of empty rows (containing only the star) to be added for
        the description of the field. Can be also -1, which means that
        "/** */" is added above the field declaration
        Default: 1

g:jcommenter_class_description_space
        The number of empty rows (containing only the star) to be added for
        the description of the class:
        Default: 2

g:jcommenter_smart_method_description_spacing
        If this option is enabled, and a method has no exceptions, parameters
        or return value, the space for the description of that method is
        allways one row. This is handy if you want to keep an empty line
        between the description and the tags, as is defined in Sun's java code
        conventions
        Default: v:true

g:jcommenter_class_author
        The content for the author-tag of class-comments. Use a string to
        represent the author name or use a number to prevent author tag
        generation.
        Default: ''

g:jcommenter_class_version
        The content for the version-tag of class-coments. Use a string to
        represent the class version or use a number to prevent version tag
        generation
        Default: ''

g:jcommenter_file_template_generator
        If not an empty string, it is taken as the name of a function that can
        be used to generate the file template.
        A template-generation function can be defined as follows:

            function! MyTemplateFunction()
                let l:template = ['/* File name: ' . bufname('%')  ,
                                \ ' * Authors  :  me and myself'   ,
                                \ ' * Created  : ' . strftime('%c'),
                                \ ' * ~~Extra template info~~'     ,
                                \ ' * blah blah blah..'            ,
                                \ ' */']
                return l:template
            endfunction

        And latter assigned with:

            let g:jcommenter_file_template_function = 'MyTemplateFunction'

        Default: ''

g:jcommenter_file_author
        The author added to file comments. Use a string to represent the file
        author or a number otherwise. Only applicable if
        g:jcommenter_file_template_generator is not set to a funcref.
        Default: ''

g:jcommenter_file_copyright
        Copyright holder. Use a string to add a field with added copyright
        info  or a number otherwise. Only applicable if
        g:jcommenter_file_template_generator is not set to a funcref.
        Defaut: ''

g:jcommenter_file_noautotime
        Set to v:true if you don't like the automatically added
        "created"-time. Only applicable if
        g:jcommenter_file_template_generator is not set to a funcref.
        Default: v:false

g:jcommenter_use_exception_tag
        Set to v:true if you want to use "@exception" instead of "@throws"
        Default: 0

g:jcommenter_update_comments
        Define whether jcommenter tries to parse and update the existing
        Doc-comments on the item it was executed on. If this feature is
        disabled, a completely new comment-template is written.
        Default: v:true

g:jcommenter_remove_tags_on_update
        Define whether jcommenter should remove old tags (eg. if the return
        value was changed from int to void). Will not work for exceptions,
        since it should not remove RuntimeExceptions, and recognizing whether
        an exception is RTE is very hard. This feature is not throughly
        tested, and might delete something it was not supposed to, so use with
        care. Only applicable if g:jcommenter_update_comments is enabled.
        Default: v:true

g:jcommenter_add_empty_line
        Whether to prepend an empty line before the generated comment, if the
        line just above the comment would otherwise be non-empty.
        Default: v:true

==============================================================================
4. Bugs                                                      *jcommenter_bugs*

==============================================================================
5. Contributing                                      *jcommenter_contributing*

Send any comments or bugreports to bjorklid@st.jyu.fi

Happy coding! ;-)

==============================================================================
6. Changelog                                            *jcommenter_changelog*

1.3.2 : Refactoring the code to be more robust and permit configuration
        through external variables. Added documentation file.
1.3.1 : Fixed two bugs concerning the modifications of 1.3-version.
1.3   : Added check to see whether the script is already loaded
        Option to have an empty line automatically added before the
          generated comment if there was none previously. See config
          ("b:jcommenter_add_empty_line").
1.2.1 : When executed on last line (must be empty), modeline gets generated.
        Option to have default @return, @param etc. values. see config.
        Option to have space between "Tag groups"
1.2 : Complete method comment updating. Now removes '@param'-tags
          if the parameter does not exist in the method header.
          Set "b:jcommenter_remove_tags_on_update" to true if you want to
          use this option. Exceptions will not get removed ever, since
          determining whether they are RuntimeExceptions or not is very
          hard.
      If executed on a string like "throw new RuntimeException()", a
          @throws tag (or @exception) will be added to the previous
          Javadoc comments.
      Corrected a problem where updating didn't work if a new parameter's
          name began the same way than an existing one's.
      Now behaves correctly even when "extra stuff" is included in the
          range.
      Added mapping for insert mode to the config-file.
      Added an abbreviation (see config file). Quite nice, I think.
      Added a new public function for searching for "invalid" comments.
          See config-file for description and mappings.
      Added end-function/class/etc commenting: if you call the commenter
          on a line that contains only a closing '}', the function/class
          name is written as a comment after that. Handy when you have
          a long method/class declaration.
      A way to automatically generate the comments when the '{'-character
          after the class/method declaration. See config-file for mapping
          (need to be uncommented to be active).
1.12: Fixed a bug where all methods were interpreted as constructors
      if 'ignorecase' was on. Thanks to David Menuhin for debugging this.
1.11: Fixed a bug where the end part of the whole buffer was sometimes
      deleted when updating w/ the b:jcommenter_remove_tags_on_update
      enabled.
1.1 : Can now choose between '@throws' and '@exception' tags.
      When executed on single-line comments ("/** blah blah */") expands
          them into multiline comments preserving the text
      Partial method documentation comment updating (see below for
          description) At this point, there's a behaviour fault where
          single-line comments get expanded even if there's no tags to add.
1.0 : Did a complete rewrite of the script-code (this is the main reason
          for the version-number leap)
      A separate config-file, which should be modified to reflect the
          user's preferences
      More variables for better customization
      Due to the rewrite, should now be more robust (allthough new bugs
          may have been introduced during the process)
      Cursor movement and auto-start insert mode
      Better control over the look of the comment templates
      See installation instructions below (has changed)
0.4 : Recognizes now methods that have whitespaces before the '('.
      The file comments can now be completely redefined (see below for
          instructions) without editing the script.
      The comment-skeleton for fields is changed from '/**  */ to correspond
          with the Sun's code conventions:
          /**
           *
           */
0.3 : Added tag copying
      Recognizes interfaces (same as classes)
0.21: Improved the java-method recognition.
0.2 : initial public release.

vim: tw=78
